# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/
version: '3'

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
    environment:
      NODE_ENV: production
    user: node
    ports:
      - '8190:8090'
    expose:
      - '8090'
    entrypoint:
      - /app/docker/server_start.sh
    tty: true
    volumes:
      - type: bind
        source: ./file
        target: /app/file
      - type: bind
        source: ./log
        target: /app/log
    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker-compose up`.
    links:
      - db
    depends_on:
      db:
        condition: service_healthy
  db:
    image: groonga/pgroonga:3.2.2-alpine-16
    restart: always
    user: postgres
    volumes:
      - data_db:/var/lib/postgresql/data
      #windows下不能工作
    # volumes:
    # - type: bind
    #   source: ./file
    #   target: /app/file
    environment:
      - POSTGRES_DB=toshokan
      - POSTGRES_user=postgres
      - POSTGRES_PASSWORD=1
    ports:
      - '5433:5432'
    expose:
      - '5432'
    healthcheck:
      test: [ 'CMD', 'pg_isready' ]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  data_db:



